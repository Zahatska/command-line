GIT
Git –система версионного контроля.
Что должна уметь система версионного контроля?
1)	Сохранять предидущую версию и уметь откатываться
2)	Синхронизация работы нескольких разработчиков
3)	Возможность отменить действие или откатиться
4)	Возможность отлслеживать изменения
5)	Возможность создания песочниц – sendboxing
6)	Branching – возможеость сосздания веток и их слияние

Типы моделей версионного контроля
1)	Lock – modify – unlock (пока один человек правит файл – никто не может єтот файл редактировать)
2)	Copy – modify- merdge

Конфигурация git
-generate SSH key pair:    ssh-keygen –t rsa –C “kolonifa7@gmail.com” 	-t  - type; -C – comment;
	Генерируется два ключа публичный и приватный, с помощью которых мы потом будем подписывать 	
	коммиты на гите
-добавили публичный ключ в настройках GitHub
-сконфигурировали username и email
	Git config - -global user.name “NAME”
	Git config - -global user.email “EMAIL”

Brsnch – отпочкованная ветка 
Merge -  Заливаем обратно бранч в главную ветку
Git clone LINK – надо в командной строке быть в той папке в которую хотите клонировать проект с гит хаб ….. 
	ввести команду клон и добавить ссылку (shift + insert (0 при выключенной раскладке калькулятора))
Git status – показывает что и как в репозитории, есть ли новые файлы незакомиченные
Git commit –m “messege” – создает коммит и –м – чтобі написать комментарий
Git log – позволяет увидеть историю коммитов и месседжей
Git push – синхронизирует мой локальный репозиторий с удаленным
Git pull – синхронизирует удаленный репозиторий с локальным 
	(если кто-то внес изменения в удаленный репозиторий) 
	( эта команда шире, как-будто git fetch + git merge)
Git fetch - синхронизирует удаленный репозиторий с локальным

Git checkout NAME.txt – позволяет откатить изменения в указанном файле
Git checkout . (с точкой) – позволяет откатить все измененния
Git checkout master – переход в ветку мастер
Git checkout ‘назание ветки’ – переход в ветку
Git checkout –b feature – создает ветку с именем feature и переходит в нее
Git clean -xdf – удаляет новые файлы (f – force – обязательный флаг)

Git gui& - открвает графический интерфейс, если вдруг надо перетащить файл из индекса (после git add) обратно

 Как откатить комит
Git commit –amend –m”massage” – (amend – внести изменения) – октрываем файл, дописываем и изменяем то,
	 что нам надо и вызываем эту команду, она вносит изменения в уже созданный коммит не создавая нового
Git reset HEAD^^ (HEAD ~2) – полностью ужаляет последний коммит 
	(^^ - сколько ушек на столько коммитов назад мы откатываемся или ~ тогда уквзываем числом 
	количество коммитов )
 

Как отменить изменения, которые мы запушили
Git revert <sha1>
	Shi 1 – код, которій можно найти віполнив команду git log
	 далее мы входим в тестовій редактор Vi и пищем коммент к реверту, после пошем комманду  	
	:wq (write and quit – это хначит мы записываем конттент файла и выходим из Vi)
	Button INSERT – входим в режим правки комментария
 	Button ESC – выход из режимі редакторования
	После пушим наш реверт git push

ФАЙЛ .gitignore – создаем файл (начинается с точки, потому что скрытый, и мы можем добавлять 
	туда файлы, которые нам стоит игнорировать , чтобы не закомитить (например все лог файлы *.log))
 
FAST FIRVARD MERGE – быстрая перемотка
Git marge назавние_ветки – чтобы провести слияние веток надо перейти в ту ветку, 
	в которую хотите залить изменения (ветка main) , если в ветке маин нет новых коммитов, 
	а в отпочкованной ветке фича есть коммиты, то проводим слияние путем перемотки 
	(просто переставляем HEAD вперед )
NON FAST FIRVARD MERGE – если в ветку маин есть уже коммиты и в ветке фича есть коммиты – то 
	для слияния надо создать общий коммит


Rebase – изменение базы отпочкованного коммита (родительсктм коммитом сначала был коммит С,
	 а после Rebase  станет последний созданный в главной ветке коммит Е)
Git tag название_тега – коммиты можно тэгать и пушить это , чтобы потом было проще найти коммит
Git tag –list – показывает весь список тэгов
Git stash save “description” - Stash – временное хранилище для изменений, если вдруг мі сейчас 
	находимся в процессе раюоті, но нам срочно надо перейти в другой бранч и там что-то
	 срочно сделать…мі не хотим комитить сделанную раюоту, потому что рано, но и удалять все нельзя,	
	 потому что потраченно время…нам необходимо где-то временно сохранить проделанную работу, 
	чтобы потом к ней вернуться
Git stash list – перечень стешей
Git stach pop назавние_стеша– возвращает стеш и удаляет его
Git stach apply название_стеша возвращает стеш и оставляет его
Git stach drop название_стеша – удаляет стеш
